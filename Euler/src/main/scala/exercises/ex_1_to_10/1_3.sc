//problem 1
/**
 * If we list all the natural numbers below 10
 * that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
 */
((1 until 1000) filter (x => x % 3 == 0 || x % 5 == 0)).sum
(1 until 1000) filter (x => x % 3 == 0 || x % 5 == 0) reduceLeft (_ + _)

//problem 2
/**
 * Each new term in the Fibonacci sequence is generated by adding the
 * previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do
not exceed four million, find the sum of the even-valued terms.
 */
//lazy val fib: Stream[Int] = 1 #:: (1 #:: (for {(x, y) <- fib.zip(fib.tail)} yield (x + y)))
lazy val fib: Stream[Int] = 1 #:: 1 #:: fib.zip(fib.tail).map{ case (x,y) => x+y}
fib.filter( _ % 2 == 0).takeWhile(_ <= 4000000).reduceLeft(_ + _)
//problem 3
/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
 * @param n
 * @return
 */
def primeFactors(n:Long):List[Long] = {
  def loop(currentN:Long, possibleFactor:Long, acc:List[Long]):List[Long] = {
    if(currentN == 1 || possibleFactor > math.sqrt(n)) acc
    else {
      if( currentN % possibleFactor == 0) loop(currentN/possibleFactor, 2, possibleFactor::acc)
      else loop(currentN,possibleFactor+1, acc)
    }
  }
  loop(n,2,List())
}

def largestPF(n:Long) = primeFactors(n).head

def primeFactors2(n:Long):List[Long]={
  (2L to math.sqrt(n).toLong).find(n % _ == 0).map(x => x::primeFactors2(n/x)).getOrElse(List(n))
}
largestPF(13195)
largestPF(600851475143L)

def largestPF2(n:Long) = primeFactors2(n).last
largestPF2(600851475143L)

primeFactors2(8L)
primeFactors(8)